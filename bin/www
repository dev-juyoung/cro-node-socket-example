#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cro-node-socket-example:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 * Integrates socket with server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Listening on provided socket interfaces.
 */

io.on('connection', onConnection);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// 채팅방에 사용될 channel명.
const channel = 'cro-socket-example';

/**
 * Event listener for Socket server "connection" event.
 */
function onConnection(socket) {
  debug('User is Connection!');

  // 유저의 접속에 대한 이벤트를 전달 받음.
  socket.on('join-user', (data) => {
    // channel에 접속 처리.
    socket.join(channel, () => {
      // channel에 join 완료 후, 해당 socket객체에 username 저장.
      socket.username = data.username;

      // channel에 join처리 완료 후, 클라이언트로 이벤트를 전달함.
      // io.emit() 또는 socket.broadcast.emit(): 현재 socket에 연결되어 있는 모든 client에게 이벤트를 방출한다. (본인 포함)
      // socket.to(channel).emit(): 이벤트를 보낸 client를 제외한 해당 channel의 모든 client에게 이벤트를 방출한다.
      socket.to(channel).emit('system', { type: 'system', action: 'entered', data: data });
    })

    // 메시지 이벤트 전달 받음.
    socket.on('chat-message', (data) => {
      // 전달받은 메시지를 이벤트를 보낸 client를 제외한 해당 channel의 모든 client에게 재 전달한다.
      socket.to(channel).emit('chat-message', { type: 'received', data: data });
    })

    // 해당 socket의 disconnect 처리.
    socket.on('disconnect', () => {
      // 해당 socket객체에 저장한 username을 이용하여, 채팅방 나감 이벤트를 전달한다.
      socket.to(channel).emit('system', { type: 'system', action: 'exited', data: { username: socket.username } });
    });
  });
}